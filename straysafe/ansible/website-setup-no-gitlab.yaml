---
- hosts: webservers
  vars_files:
    - vault.yml
  vars:
    ansible_become_pass: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_pass') }}" # imported from vault
    webserver_public_ip: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_public_ip') }}"
    webserver_port: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_port') }}"
    database_private_ip: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_private_ip') }}"
    database_name: "straysafe"
    database_user: "straysafe"
    database_password: "{{ database_password }}"
    git_branch: "ci%2Fcd-add-python-%235"
    read_deploy_token: "glpat-_ckNyuqdmSSJTaLsFoRp"
  become: yes

  tasks:
    - name: "Update apt"
      apt:
        update_cache: yes

    - name: "Install Java 21 to target"
      get_url:
        url: "https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb"
        dest: "/tmp/jdk-21_linux-x64_bin.deb"
        mode: "0644"

    - name: "Install Java 21 to localhost"
      local_action:
        module: get_url
        url: "https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb"
        dest: "/tmp/jdk-21_linux-x64_bin.deb"
        mode: "0644"

    - name: "Install downloaded Java 21 package on target"
      apt:
        deb: "/tmp/jdk-21_linux-x64_bin.deb"

    - name: "Install downloaded Java 21 package on localhost"
      local_action:
        module: apt
        deb: "/tmp/jdk-21_linux-x64_bin.deb"

    - name: "Install maven on localhost"
      local_action:
        module: apt
        update_cache: yes
        name: maven
        state: present

    - name: "Generate .env file for springboot"
      local_action:
        module: copy
        content: |
          DATABASE_IP={{ database_private_ip }}
          DB_PORT=5432
          DB_NAME={{ database_name }}
          DB_USERNAME={{ database_user }}
          DB_PASSWORD={{ database_password }}
          SPRING_USERNAME=admin
          SPRING_USERNAME={{ database_password }}
        dest: "../src/backend/src/main/resources/.env"

    - name: "Build spring application"
      local_action:
        module: shell
        cmd: "mvn package -DskipTests"
        chdir: "../src/backend"
        executable: /bin/bash

    - name: "Copy the Spring Boot artifact to the server"
      ansible.builtin.copy:
        src: "../src/backend/target/StraySafe.jar"
        dest: "/opt/StraySafe.jar"
        mode: "0644"

    - name: "Download pipx on target"
      apt:
        name: pipx
        state: present

    - name: "Install poetry localhost"
      local_action:
        module: shell
        cmd: "curl -sSL https://install.python-poetry.org | python3 -"
        executable: /bin/bash

    - name: "Build Python application localhost"
      shell: "poetry install && poetry build"
      args:
        chdir: "../src/python-backend"
        executable: /bin/bash
      environment:
        PATH: "/root/.local/bin:{{ ansible_env.PATH }}"
      delegate_to: 127.0.0.1

    - name: "Move the Python backend artifact to the server"
      ansible.builtin.copy:
        src: "../src/python-backend/dist/"
        dest: "/opt/python-dist"
        mode: "0644"
        force: yes

    - name: "Find .whl file in /opt/python-dist"
      ansible.builtin.find:
        paths: /opt/python-dist
        patterns: "*.whl"
      register: found_whl_files

    - name: "Install Python backend with pipx"
      shell:
        cmd: "pipx install {{ found_whl_files.files[0].path }} --force"
      when: found_whl_files.matched > 0

    - name: Install nvm localhost
      local_action:
        module: shell
        cmd: "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash"

    - name: Install node and angular-cli localhost
      local_action:
        module: shell
        cmd: "/bin/bash -c 'source ~/.nvm/nvm.sh && nvm install 20.11.0 && npm install -g @angular/cli'"

    - name: "Install npm packages and build frontend on localhost"
      local_action:
        module: shell
        # echo n is to accept the option of autocompletion
        cmd: "/bin/bash -c 'source ~/.nvm/nvm.sh && npm install && echo n | ng build --configuration=production'"
        chdir: "../src/frontend"

    - name: "Copy the frontend artifact to the server"
      ansible.builtin.copy:
        src: "../src/frontend/dist/"
        dest: "/tmp/dist"
        mode: "0644"

    - name: "Remove existing Angular frontend directory"
      file:
        path: "/var/www/html/"
        state: absent

    - name: "Change ownership of the Angular frontend directory"
      ansible.builtin.file:
        path: "/tmp/dist/frontend"
        owner: www-data
        group: www-data
        recurse: yes

    - name: "Move the Angular application to the correct location"
      ansible.builtin.shell:
        cmd: "mv /tmp/dist/frontend/ /var/www/html"
        executable: /bin/bash

    - name: "Deploy the Angular frontend Apache configuration"
      ansible.builtin.template:
        src: "apache/frontend.conf.j2"
        dest: "/etc/apache2/sites-available/frontend.conf"

    - name: "Deploy the Spring Boot app configuration"
      ansible.builtin.template:
        src: "apache/spring-boot.conf.j2"
        dest: "/etc/apache2/sites-available/spring-boot.conf"

    - name: "Deploy the Python backend app configuration"
      ansible.builtin.template:
        src: "apache/python-backend.conf.j2"
        dest: "/etc/apache2/sites-available/python-backend.conf"

    - name: "Add config to for apache listen to 8080 and 8000 ports"
      ansible.builtin.blockinfile:
        path: /etc/apache2/ports.conf
        block: |
          Listen 8080
          Listen 8000
        state: present

    - name: "Configure Apache"
      ansible.builtin.shell: |
        a2dissite 000-default.conf &&
        a2ensite frontend.conf &&
        a2ensite python-backend.conf &&
        a2ensite spring-boot.conf &&
        a2enmod rewrite &&
        a2enmod proxy &&
        a2enmod proxy_http

    - name: "Restart Apache to apply changes"
      systemd:
        name: apache2
        state: restarted

    - name: "Create systemd service file for Spring Boot application"
      ansible.builtin.copy:
        dest: "/etc/systemd/system/spring-boot-app.service"
        content: |
          [Unit]
          Description=Spring Boot Application
          After=syslog.target

          [Service]
          User=www-data
          ExecStart=/usr/bin/java -jar /opt/StraySafe.jar
          SuccessExitStatus=143

          [Install]
          WantedBy=multi-user.target

    - name: "Create systemd service file for Python backend"
      ansible.builtin.copy:
        dest: "/etc/systemd/system/python-app.service"
        content: |
          [Unit]
          Description=Gunicorn instance to serve straysafe python backend
          After=network.target

          [Service]
          User=root
          Group=root
          WorkingDirectory=/root/.local/pipx/venvs/straysafe/lib/python3.11/site-packages
          Environment="PATH=/root/.local/pipx/venvs/straysafe/bin"
          ExecStart=/root/.local/pipx/venvs/straysafe/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 straysafe.run:app

          [Install]
          WantedBy=multi-user.target

    - name: "Reload systemd to recognize Spring Boot service"
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: "Enable and start Spring Boot service"
      ansible.builtin.systemd:
        name: spring-boot-app
        enabled: yes
        state: started

    - name: "Enable and start Python service"
      ansible.builtin.systemd:
        name: python-app
        enabled: yes
        state: started

    - debug:
        msg: "Deployment complete. Frontend is available. Can be seen in the browser at http://{{ webserver_public_ip }}:{{ webserver_port }}"
