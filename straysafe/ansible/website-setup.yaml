---
- hosts: webservers
  vars_files:
    - vault.yml
  vars:
    ansible_become_pass: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_pass') }}" # imported from vault
    git_branch: "development"
    read_deploy_token: "glpat-_ckNyuqdmSSJTaLsFoRp"
    webserver_public_ip: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_public_ip') }}"
    webserver_port: "{{ lookup('vars', 'webservers_' + inventory_hostname + '_port') }}"
  become: yes

  tasks:
    - name: "Install Java 21"
      get_url:
        url: "https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb"
        dest: "/tmp/jdk-21_linux-x64_bin.deb"
        mode: '0644'

    - name: "Install downloaded Java 21 package"
      apt:
        deb: "/tmp/jdk-21_linux-x64_bin.deb"

    - name: "Set Java 21 as the default Java version"
      command: "update-java-alternatives --set jdk-21-oracle-x64"
      ignore_errors: yes

    - name: "Download the latest Spring Boot backend artifact"
      get_url:
        url: "https://git.mif.vu.lt/api/v4/projects/4515/jobs/artifacts/{{ git_branch }}/download?job=build_spring"
        headers:
          PRIVATE-TOKEN: "{{ read_deploy_token }}"
        dest: "/tmp/backend.zip"
        mode: '0644'

    - name: "Unzip the Spring Boot backend artifact"
      ansible.builtin.unarchive:
        src: "/tmp/backend.zip"
        dest: "/opt/"
        remote_src: yes

    - name: "Download pipx"
      apt:
        name: pipx
        state: present

    - name: "Download the latest Python backend artifact"
      get_url:
        url: "https://git.mif.vu.lt/api/v4/projects/4515/jobs/artifacts/{{ git_branch }}/download?job=build_python"
        headers:
          PRIVATE-TOKEN: "{{ read_deploy_token }}"
        dest: "/tmp/python-backend.zip"
        mode: '0644'

    - name: "Unzip the Python backend artifact"
      ansible.builtin.unarchive:
        src: "/tmp/python-backend.zip"
        dest: "/opt/"
        remote_src: yes

    - name: "Find .whl file in /opt/python-backend"
      ansible.builtin.find:
        paths: /opt/python-dist
        patterns: '*.whl'
      register: found_whl_files

    - name: "Install Python backend with pipx"
      shell:
        cmd: "pipx install {{ found_whl_files.files[0].path }} --force"
      when: found_whl_files.matched > 0

    - name: "Download the latest Angular frontend artifact"
      get_url:
        url: "https://git.mif.vu.lt/api/v4/projects/4515/jobs/artifacts/{{ git_branch }}/download?job=build_angular"
        headers:
          PRIVATE-TOKEN: "{{ read_deploy_token }}"
        dest: "/tmp/frontend.zip"
        mode: '0644'

    - name: "Remove existing Angular frontend directory"
      file:
        path: "/var/www/html/"
        state: absent
      
    - name: "Remove existing dist directory"
      file:
        path: "/tmp/dist/"
        state: absent
    
    - name: "Unzip the Angular frontend artifact"
      ansible.builtin.unarchive:
        src: "/tmp/frontend.zip"
        dest: "/tmp"
        remote_src: yes
      
    - name: "Change ownership of the Angular frontend directory"
      ansible.builtin.file:
        path: "/tmp/dist/frontend"
        owner: www-data
        group: www-data
        recurse: yes

    - name: "Move the Angular application to the correct location"
      ansible.builtin.shell:
        cmd: "mv /tmp/dist/frontend /var/www/html"
        executable: /bin/bash

    - name: "Deploy the Angular frontend Apache configuration"
      ansible.builtin.template:
        src: "apache/frontend.conf.j2"
        dest: "/etc/apache2/sites-available/frontend.conf"

    - name: "Deploy the Spring Boot app configuration"
      ansible.builtin.template:
        src: "apache/spring-boot.conf.j2"
        dest: "/etc/apache2/sites-available/spring-boot.conf"

    - name: "Deploy the Python backend app configuration"
      ansible.builtin.template:
        src: "apache/python-backend.conf.j2"
        dest: "/etc/apache2/sites-available/python-backend.conf"

    - name: "Add config to for apache listen to 8080 and 8000 ports"
      ansible.builtin.blockinfile:
        path: /etc/apache2/ports.conf
        block: |
          Listen 8080
          Listen 8000
        state: present

    - name: "Configure Apache"
      ansible.builtin.shell: |
        a2dissite 000-default.conf &&
        a2ensite frontend.conf &&
        a2ensite python-backend.conf &&
        a2ensite spring-boot.conf &&
        a2enmod rewrite &&
        a2enmod proxy &&
        a2enmod proxy_http

    - name: "Restart Apache to apply changes"
      systemd:
        name: apache2
        state: restarted

    - name: "Create systemd service file for Spring Boot application"
      ansible.builtin.copy:
        dest: "/etc/systemd/system/spring-boot-app.service"
        content: |
          [Unit]
          Description=Spring Boot Application
          After=syslog.target

          [Service]
          User=www-data
          ExecStart=/usr/bin/java -jar /opt/StraySafe.jar
          SuccessExitStatus=143

          [Install]
          WantedBy=multi-user.target

    - name: "Create systemd service file for Python backend"
      ansible.builtin.copy:
        dest: "/etc/systemd/system/python-app.service"
        content: |
          [Unit]
          Description=Gunicorn instance to serve straysafe python backend
          After=network.target

          [Service]
          User=root
          Group=root
          WorkingDirectory=/root/.local/pipx/venvs/straysafe/lib/python3.11/site-packages
          Environment="PATH=/root/.local/pipx/venvs/straysafe/bin"
          ExecStart=/root/.local/pipx/venvs/straysafe/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 straysafe.run:app

          [Install]
          WantedBy=multi-user.target


    - name: "Reload systemd to recognize Spring Boot service"
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: "Enable and start Spring Boot service"
      ansible.builtin.systemd:
        name: spring-boot-app
        enabled: yes
        state: started

    - name: "Enable and start Python service"
      ansible.builtin.systemd:
        name: python-app
        enabled: yes
        state: started

    - debug:
        msg: "Deployment complete. Frontend is available. Can be seen in the browser at http://{{ webserver_public_ip }}:{{ webserver_port }}"
